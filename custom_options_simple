# Enable grsec
GRKERNSEC=y

# Grsec will make most of the decisions automatically
GRKERNSEC_CONFIG_AUTO=y

# Kernel is for desktop use
GRKERNSEC_CONFIG_DESKTOP=y

# Kernel will not be used for virtual use -- no need to include any such vulnerabilities
GRKERNSEC_CONFIG_VIRT_NONE=y

# Support Core i processor family
GRKERNSEC_CONFIG_VIRT_EPT=y

# Prioritize performance
GRKERNSEC_CONFIG_PRIORITY_PERF=y

# Enable Pax
PAX=y

# Build with soft-mode support  -- this can be enabled or disabled after compilation if built in
PAX_SOFTMODE

# Build with per-executable xattr support -- does not work with FS that does not support xattr
PAX_XATTR_PAX_FLAGS=y

# Recommended in Arch Wiki
CONFIG_RANDOMIZE_BASE=y
CONFIG_GRKERNSEC_HIDESYM=y

# No exec breaks java, this does not
PAX_PAGEEXEC=y

# Strongly recommended
PAX_MPROTECT=y

# Not recommended for modern linux distros
PAX_ELFRELOCS=n

# Extendes mproc into kernel land, not just userland
PAX_KERNEXEC=y

# Stack randomization -- strongly recommended, paxctl can control per-file
PAX_ASLR=y

# Randomiza mmap requests
PAX_RANDMMAP=y

# Sanitize memory not in use can be turned off at boot using "pax_sanitize_slab=0"
PAX_MEMORY_SANITIZE=y

# Eliminate stack leaks, but with performance hit (~1% on single-core). If performance hit is big, use STRUCTLEAK
PAX_MEMORY_STACKLEAK=y

# A less secure alternative to PAX_MEMORY_STACKLEAK, but with less performance hit
#CONFIG_PAX_MEMORY_STRUCTLEAK=y

# This may cause huge performance hit from boot. On new Intel architectures, this kernel command may help:
# pax_weakuderef
CONFIG_PAX_MEMORY_UDEREF=y

# Prevent overflows in refcount -- no performance issues, recommended
CONFIG_PAX_REFCOUNT=y

# Automatically constify eligible structures
CONFIG_PAX_CONSTIFY_PLUGIN=y

# Harden heap object copies between kernel and userland
CONFIG_PAX_USERCOPY=y

# Prevent various integer overflows in function size parameters
CONFIG_PAX_SIZE_OVERFLOW=y

# Generate some entropy during boot and runtime -- probably unneccessary on desktop/laptop with user/DE
# there is a lot of entropy anyway, if used, there is a performance hit
#CONFIG_PAX_LATENT_ENTROPY=y


# Deny reading/writing to /dev/kmem, /dev/mem, and /dev/port
# BREAKS INTEL PSTATES!! If this doesn't matter, USE THIS
CONFIG_GRKERNSEC_KMEM=n

# Restrict VM86 mode
# May break xf86, but unlikely, enable if it doesn't
CONFIG_GRKERNSEC_VM86=y

# Disable privileged IO
# Breaks xf86, versions of xorg from before 2012, and hwclock.
# For these reasons, disabling and using RBAC instead
# sysctl: kernel.grsecurity.disable_priv_io
CONFIG_GRKERNSEC_IO=n

# Harden BPF JIT against spray attacks[edit]
CONFIG_GRKERNSEC_JIT_HARDEN=y

# Disable unprivileged PERF_EVENTS usage by default
CONFIG_GRKERNSEC_PERF_HARDEN=y

# Insert random gaps between thread stacks
CONFIG_GRKERNSEC_RAND_THREADSTACK=y

# Harden ASLR against information leaks and entropy reduction
CONFIG_GRKERNSEC_PROC_MEMMAP=y

# Prevent kernel stack overflows
CONFIG_GRKERNSEC_KSTACKOVERFLOW=y

# Deter exploit bruteforcing
# sysctl kernel.grsecurity.deter_bruteforce creates sysctl option "deter_bruteforce"
CONFIG_GRKERNSEC_BRUTE=y

# Harden module auto-loading
# May break kernel modules, as some may be loaded by non-root user, particularly on Ubuntu
CONFIG_GRKERNSEC_MODHARDEN=y

# Hide kernel symbols
# Only useful if compiling individually (which I am), GRKERNSEC_DMESG is enabled,
# and RBAC system is on and hiding other files such as kernel image and System.map
CONFIG_GRKERNSEC_HIDESYM=y

# Maximum tries before password lockout
CONFIG_GRKERNSEC_ACL_MAXTRIES=5

#Time to wait after max password tries, in seconds
CONFIG_GRKERNSEC_ACL_TIMEOUT=600

# Eliminate stat/notify-based device sidechannels
CONFIG_GRKERNSEC_DEVICE_SIDECHANNEL=y

# THE NEXT FEW OPTIONS HARDEN CHROOTS 
# IF SOFTWARE BREAKS AS A RESULT, THEY MAY BE THE CAUSE

# CHROOT HARDENING ENABLE
CONFIG_GRKERNSEC_CHROOT=y

# CHROOT Deny mounts
# sysctl: kernel.grsecurity.chroot_deny_mount
CONFIG_GRKERNSEC_CHROOT_MOUNT=y

# Deny double-chroots
# sysctl: kernel.grsecurity.chroot_deny_chroot
CONFIG_GRKERNSEC_CHROOT_DOUBLE=y

# Deny pivot_root in chroot
# sysctl: kernel.grsecurity.chroot_deny_pivot
CONFIG_GRKERNSEC_CHROOT_PIVOT=y

# Enforce chdir("/")
# sysctl: kernel.grsecurity.chroot_enforce_chdir
CONFIG_GRKERNSEC_CHROOT_CHDIR=y

# Deny (f)chmod +s
# sysctl: kernel.grsecurity.chroot_deny_chmod
CONFIG_GRKERNSEC_CHROOT_CHMOD=y

# Deny fchdir out of chroot
# sysctl: kernel.grsecurity.chroot_deny_fchdir
CONFIG_GRKERNSEC_CHROOT_FCHDIR=y

# Deny mknod
# sysctl: kernel.grsecurity.chroot_deny_mknod
CONFIG_GRKERNSEC_CHROOT_MKNOD=y

# Deny shmat() out of chroot
# sysctl: kernel.grsecurity.chroot_deny_shmat
CONFIG_GRKERNSEC_CHROOT_SHMAT=y

# Deny access to abstract AF_UNIX sockets out of chroot
# sysctl: kernel.grsecurity.chroot_deny_unix
CONFIG_GRKERNSEC_CHROOT_UNIX=y

# Protect outside processes
# sysctl: kernel.grsecurity.chroot_findtask
CONFIG_GRKERNSEC_CHROOT_FINDTASK=y

# Restrict priority changes[edit]
# sysctl: kernel.grsecurity.chroot_restrict_nice
CONFIG_GRKERNSEC_CHROOT_NICE=y

# Deny sysctl writes
# sysctl: kernel.grsecurity.chroot_deny_sysctl
CONFIG_GRKERNSEC_CHROOT_SYSCTL=y

# Capability restrictions
# sysctl: kernel.grsecurity.chroot_caps
CONFIG_GRKERNSEC_CHROOT_CAPS=y

# Exempt initrd tasks from restrictions
CONFIG_GRKERNSEC_CHROOT_INITRD=y

## END CHROOT HARDENING

# Dmesg(8) restriction
# sysctl: kernel.grsecurity.dmesg
CONFIG_GRKERNSEC_DMESG=y

# Deter ptrace-based process snooping
# sysctl: kernel.grsecurity.harden_ptrace
CONFIG_GRKERNSEC_HARDEN_PTRACE

# Enforce consistent multithreaded privileges
# Only an issue in older software
# sysctl: kernel.grsecurity.consistent_setxid
CONFIG_GRKERNSEC_SETXID=y

# Disallow access to overly-permissive IPC objects
# sysctl: kernel.grsecurity.harden_ipc
CONFIG_GRKERNSEC_HARDEN_IPC=y

# Partially restrict all non-root users
# This seems a good balance between all the different TPE settings
# sysctl: kernel.grsecurity.tpe_restrict_all
CONFIG_GRKERNSEC_TPE_ALL=y

# Larger entropy pools
CONFIG_GRKERNSEC_RANDNET=y

# TCP/UDP blackhole and LAST_ACK DoS prevention
# sysctl: kernel.grsecurity.ip_blackhole (expects 0/1: off/on)
# sysctl: kernel.grsecurity.lastack_retries (expects number, default is 4)
CONFIG_GRKERNSEC_BLACKHOLE=y

# Disable TCP Simultaneous Connect
CONFIG_GRKERNSEC_NO_SIMULT_CONNECT=y

# Sysctl support
CONFIG_GRKERNSEC_SYSCTL=y

# Turn on sysctl features by default
CONFIG_GRKERNSEC_SYSCTL_ON=y

## END OF CONFIG
